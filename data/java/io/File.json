[
    {
        "Modifier and Type": "boolean",
        "Method": "canExecute",
        "Arguments": "()",
        "Description": "Tests whether the application can execute the file denoted by this abstract pathname."
    },
    {
        "Modifier and Type": "boolean",
        "Method": "canRead",
        "Arguments": "()",
        "Description": "Tests whether the application can read the file denoted by this abstract pathname."
    },
    {
        "Modifier and Type": "boolean",
        "Method": "canWrite",
        "Arguments": "()",
        "Description": "Tests whether the application can modify the file denoted by this abstract pathname."
    },
    {
        "Modifier and Type": "int",
        "Method": "compareTo",
        "Arguments": "(File pathname)",
        "Description": "Compares two abstract pathnames lexicographically."
    },
    {
        "Modifier and Type": "boolean",
        "Method": "createNewFile",
        "Arguments": "()",
        "Description": "Atomically creates a new"
    },
    {
        "Modifier and Type": "static File",
        "Method": "createTempFile",
        "Arguments": "(String prefix, String suffix)",
        "Description": "Creates an empty file in the default temporary-file directory"
    },
    {
        "Modifier and Type": "static File",
        "Method": "createTempFile",
        "Arguments": "(String prefix, String suffix, File directory)",
        "Description": "Creates a new empty file in the specified directory"
    },
    {
        "Modifier and Type": "boolean",
        "Method": "delete",
        "Arguments": "()",
        "Description": "Deletes the file or directory denoted by this abstract pathname."
    },
    {
        "Modifier and Type": "void",
        "Method": "deleteOnExit",
        "Arguments": "()",
        "Description": "Requests that the file or directory denoted by this abstract pathname be deleted when the virtual machine terminates."
    },
    {
        "Modifier and Type": "boolean",
        "Method": "equals",
        "Arguments": "(Object obj)",
        "Description": "Tests this abstract pathname for equality with the given object."
    },
    {
        "Modifier and Type": "boolean",
        "Method": "exists",
        "Arguments": "()",
        "Description": "Tests whether the file or directory denoted by this abstract pathname exists."
    },
    {
        "Modifier and Type": "File",
        "Method": "getAbsoluteFile",
        "Arguments": "()",
        "Description": "Returns the absolute form of this abstract pathname."
    },
    {
        "Modifier and Type": "String",
        "Method": "getAbsolutePath",
        "Arguments": "()",
        "Description": "Returns the absolute pathname string of this abstract pathname."
    },
    {
        "Modifier and Type": "File",
        "Method": "getCanonicalFile",
        "Arguments": "()",
        "Description": "Returns the canonical form of this abstract pathname."
    },
    {
        "Modifier and Type": "String",
        "Method": "getCanonicalPath",
        "Arguments": "()",
        "Description": "Returns the canonical pathname string of this abstract pathname."
    },
    {
        "Modifier and Type": "long",
        "Method": "getFreeSpace",
        "Arguments": "()",
        "Description": "Returns the number of unallocated bytes in the partition named by this abstract path name."
    },
    {
        "Modifier and Type": "String",
        "Method": "getName",
        "Arguments": "()",
        "Description": "Returns the name of the file or directory denoted by this abstract pathname."
    },
    {
        "Modifier and Type": "String",
        "Method": "getParent",
        "Arguments": "()",
        "Description": "Returns the pathname string of this abstract pathname's parent"
    },
    {
        "Modifier and Type": "File",
        "Method": "getParentFile",
        "Arguments": "()",
        "Description": "Returns the abstract pathname of this abstract pathname's parent"
    },
    {
        "Modifier and Type": "String",
        "Method": "getPath",
        "Arguments": "()",
        "Description": "Converts this abstract pathname into a pathname string."
    },
    {
        "Modifier and Type": "long",
        "Method": "getTotalSpace",
        "Arguments": "()",
        "Description": "Returns the size of the partition named by this abstract pathname."
    },
    {
        "Modifier and Type": "long",
        "Method": "getUsableSpace",
        "Arguments": "()",
        "Description": "Returns the number of bytes available to this virtual machine on the partition named by this abstract pathname."
    },
    {
        "Modifier and Type": "int",
        "Method": "hashCode",
        "Arguments": "()",
        "Description": "Computes a hash code for this abstract pathname."
    },
    {
        "Modifier and Type": "boolean",
        "Method": "isAbsolute",
        "Arguments": "()",
        "Description": "Tests whether this abstract pathname is absolute."
    },
    {
        "Modifier and Type": "boolean",
        "Method": "isDirectory",
        "Arguments": "()",
        "Description": "Tests whether the file denoted by this abstract pathname is a directory."
    },
    {
        "Modifier and Type": "boolean",
        "Method": "isFile",
        "Arguments": "()",
        "Description": "Tests whether the file denoted by this abstract pathname is a normal file."
    },
    {
        "Modifier and Type": "boolean",
        "Method": "isHidden",
        "Arguments": "()",
        "Description": "Tests whether the file named by this abstract pathname is a hidden file."
    },
    {
        "Modifier and Type": "long",
        "Method": "lastModified",
        "Arguments": "()",
        "Description": "Returns the time that the file denoted by this abstract pathname was last modified."
    },
    {
        "Modifier and Type": "long",
        "Method": "length",
        "Arguments": "()",
        "Description": "Returns the length of the file denoted by this abstract pathname."
    },
    {
        "Modifier and Type": "String[]",
        "Method": "list",
        "Arguments": "()",
        "Description": "Returns an array of strings naming the files and directories in the directory denoted by this abstract pathname."
    },
    {
        "Modifier and Type": "String[]",
        "Method": "list",
        "Arguments": "(FilenameFilter filter)",
        "Description": "Returns an array of strings naming the files and directories in the directory denoted by this abstract pathname that satisfy the specified filter."
    },
    {
        "Modifier and Type": "File[]",
        "Method": "listFiles",
        "Arguments": "()",
        "Description": "Returns an array of abstract pathnames denoting the files in the directory denoted by this abstract pathname."
    },
    {
        "Modifier and Type": "File[]",
        "Method": "listFiles",
        "Arguments": "(FileFilter filter)",
        "Description": "Returns an array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname that satisfy the specified filter."
    },
    {
        "Modifier and Type": "File[]",
        "Method": "listFiles",
        "Arguments": "(FilenameFilter filter)",
        "Description": "Returns an array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname that satisfy the specified filter."
    },
    {
        "Modifier and Type": "static File[]",
        "Method": "listRoots",
        "Arguments": "()",
        "Description": "List the available filesystem roots."
    },
    {
        "Modifier and Type": "boolean",
        "Method": "mkdir",
        "Arguments": "()",
        "Description": "Creates the directory named by this abstract pathname."
    },
    {
        "Modifier and Type": "boolean",
        "Method": "mkdirs",
        "Arguments": "()",
        "Description": "Creates the directory named by this abstract pathname"
    },
    {
        "Modifier and Type": "boolean",
        "Method": "renameTo",
        "Arguments": "(File dest)",
        "Description": "Renames the file denoted by this abstract pathname."
    },
    {
        "Modifier and Type": "boolean",
        "Method": "setExecutable",
        "Arguments": "(boolean executable)",
        "Description": "A convenience method to set the owner's execute permission for this abstract pathname."
    },
    {
        "Modifier and Type": "boolean",
        "Method": "setExecutable",
        "Arguments": "(boolean executable, boolean ownerOnly)",
        "Description": "Sets the owner's or everybody's execute permission for this abstract pathname."
    },
    {
        "Modifier and Type": "boolean",
        "Method": "setLastModified",
        "Arguments": "(long time)",
        "Description": "Sets the last-modified time of the file or directory named by this abstract pathname."
    },
    {
        "Modifier and Type": "boolean",
        "Method": "setReadable",
        "Arguments": "(boolean readable)",
        "Description": "A convenience method to set the owner's read permission for this abstract pathname."
    },
    {
        "Modifier and Type": "boolean",
        "Method": "setReadable",
        "Arguments": "(boolean readable, boolean ownerOnly)",
        "Description": "Sets the owner's or everybody's read permission for this abstract pathname."
    },
    {
        "Modifier and Type": "boolean",
        "Method": "setReadOnly",
        "Arguments": "()",
        "Description": "Marks the file or directory named by this abstract pathname so that only read operations are allowed."
    },
    {
        "Modifier and Type": "boolean",
        "Method": "setWritable",
        "Arguments": "(boolean writable)",
        "Description": "A convenience method to set the owner's write permission for this abstract pathname."
    },
    {
        "Modifier and Type": "boolean",
        "Method": "setWritable",
        "Arguments": "(boolean writable, boolean ownerOnly)",
        "Description": "Sets the owner's or everybody's write permission for this abstract pathname."
    },
    {
        "Modifier and Type": "Path",
        "Method": "toPath",
        "Arguments": "()",
        "Description": "Returns a java.nio.file.Path object constructed from the this abstract path."
    },
    {
        "Modifier and Type": "String",
        "Method": "toString",
        "Arguments": "()",
        "Description": "Returns the pathname string of this abstract pathname."
    },
    {
        "Modifier and Type": "URI",
        "Method": "toURI",
        "Arguments": "()",
        "Description": "Constructs a file: URI that represents this abstract pathname."
    },
    {
        "Modifier and Type": "URL",
        "Method": "toURL",
        "Arguments": "()",
        "Description": "Deprecated. "
    },
    {
        "Modifier and Type": "This method does not automatically escape characters that are illegal in URLs. It is recommended that new code convert an abstract pathname into a URL by first converting it into a URI",
        "Method": " via the toURI method",
        "Arguments": " and then converting the URI into a URL via the URI.toURL method."
    }
]
