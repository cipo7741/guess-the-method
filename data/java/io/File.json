[
    {
        "type": "boolean",
        "name": "canExecute",
        "args": [],
        "desc": "Tests whether the application can execute the file denoted by this abstract pathname."
    },
    {
        "type": "boolean",
        "name": "canRead",
        "args": [],
        "desc": "Tests whether the application can read the file denoted by this abstract pathname."
    },
    {
        "type": "boolean",
        "name": "canWrite",
        "args": [],
        "desc": "Tests whether the application can modify the file denoted by this abstract pathname."
    },
    {
        "type": "int",
        "name": "compareTo",
        "args": ["File pathname"],
        "desc": "Compares two abstract pathnames lexicographically."
    },
    {
        "type": "boolean",
        "name": "createNewFile",
        "args": [],
        "desc": "Atomically creates a new"
    },
    {
        "type": "static File",
        "name": "createTempFile",
        "args": ["String prefix", "String suffix"],
        "desc": "Creates an empty file in the default temporary-file directory"
    },
    {
        "type": "static File",
        "name": "createTempFile",
        "args": ["String prefix", "String suffix", "File directory"],
        "desc": "Creates a new empty file in the specified directory"
    },
    {
        "type": "boolean",
        "name": "delete",
        "args": [],
        "desc": "Deletes the file or directory denoted by this abstract pathname."
    },
    {
        "type": "void",
        "name": "deleteOnExit",
        "args": [],
        "desc": "Requests that the file or directory denoted by this abstract pathname be deleted when the virtual machine terminates."
    },
    {
        "type": "boolean",
        "name": "equals",
        "args": ["Object obj"],
        "desc": "Tests this abstract pathname for equality with the given object."
    },
    {
        "type": "boolean",
        "name": "exists",
        "args": [],
        "desc": "Tests whether the file or directory denoted by this abstract pathname exists."
    },
    {
        "type": "File",
        "name": "getAbsoluteFile",
        "args": [],
        "desc": "Returns the absolute form of this abstract pathname."
    },
    {
        "type": "String",
        "name": "getAbsolutePath",
        "args": [],
        "desc": "Returns the absolute pathname string of this abstract pathname."
    },
    {
        "type": "File",
        "name": "getCanonicalFile",
        "args": [],
        "desc": "Returns the canonical form of this abstract pathname."
    },
    {
        "type": "String",
        "name": "getCanonicalPath",
        "args": [],
        "desc": "Returns the canonical pathname string of this abstract pathname."
    },
    {
        "type": "long",
        "name": "getFreeSpace",
        "args": [],
        "desc": "Returns the number of unallocated bytes in the partition named by this abstract path name."
    },
    {
        "type": "String",
        "name": "getName",
        "args": [],
        "desc": "Returns the name of the file or directory denoted by this abstract pathname."
    },
    {
        "type": "String",
        "name": "getParent",
        "args": [],
        "desc": "Returns the pathname string of this abstract pathname's parent"
    },
    {
        "type": "File",
        "name": "getParentFile",
        "args": [],
        "desc": "Returns the abstract pathname of this abstract pathname's parent"
    },
    {
        "type": "String",
        "name": "getPath",
        "args": [],
        "desc": "Converts this abstract pathname into a pathname string."
    },
    {
        "type": "long",
        "name": "getTotalSpace",
        "args": [],
        "desc": "Returns the size of the partition named by this abstract pathname."
    },
    {
        "type": "long",
        "name": "getUsableSpace",
        "args": [],
        "desc": "Returns the number of bytes available to this virtual machine on the partition named by this abstract pathname."
    },
    {
        "type": "int",
        "name": "hashCode",
        "args": [],
        "desc": "Computes a hash code for this abstract pathname."
    },
    {
        "type": "boolean",
        "name": "isAbsolute",
        "args": [],
        "desc": "Tests whether this abstract pathname is absolute."
    },
    {
        "type": "boolean",
        "name": "isDirectory",
        "args": [],
        "desc": "Tests whether the file denoted by this abstract pathname is a directory."
    },
    {
        "type": "boolean",
        "name": "isFile",
        "args": [],
        "desc": "Tests whether the file denoted by this abstract pathname is a normal file."
    },
    {
        "type": "boolean",
        "name": "isHidden",
        "args": [],
        "desc": "Tests whether the file named by this abstract pathname is a hidden file."
    },
    {
        "type": "long",
        "name": "lastModified",
        "args": [],
        "desc": "Returns the time that the file denoted by this abstract pathname was last modified."
    },
    {
        "type": "long",
        "name": "length",
        "args": [],
        "desc": "Returns the length of the file denoted by this abstract pathname."
    },
    {
        "type": "String[]",
        "name": "list",
        "args": [],
        "desc": "Returns an array of strings naming the files and directories in the directory denoted by this abstract pathname."
    },
    {
        "type": "String[]",
        "name": "list",
        "args": ["FilenameFilter filter"],
        "desc": "Returns an array of strings naming the files and directories in the directory denoted by this abstract pathname that satisfy the specified filter."
    },
    {
        "type": "File[]",
        "name": "listFiles",
        "args": [],
        "desc": "Returns an array of abstract pathnames denoting the files in the directory denoted by this abstract pathname."
    },
    {
        "type": "File[]",
        "name": "listFiles",
        "args": ["FileFilter filter"],
        "desc": "Returns an array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname that satisfy the specified filter."
    },
    {
        "type": "File[]",
        "name": "listFiles",
        "args": ["FilenameFilter filter"],
        "desc": "Returns an array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname that satisfy the specified filter."
    },
    {
        "type": "static File[]",
        "name": "listRoots",
        "args": [],
        "desc": "List the available filesystem roots."
    },
    {
        "type": "boolean",
        "name": "mkdir",
        "args": [],
        "desc": "Creates the directory named by this abstract pathname."
    },
    {
        "type": "boolean",
        "name": "mkdirs",
        "args": [],
        "desc": "Creates the directory named by this abstract pathname"
    },
    {
        "type": "boolean",
        "name": "renameTo",
        "args": ["File dest"],
        "desc": "Renames the file denoted by this abstract pathname."
    },
    {
        "type": "boolean",
        "name": "setExecutable",
        "args": ["boolean executable"],
        "desc": "A convenience name to set the owner's execute permission for this abstract pathname."
    },
    {
        "type": "boolean",
        "name": "setExecutable",
        "args": ["boolean executable", "boolean ownerOnly"],
        "desc": "Sets the owner's or everybody's execute permission for this abstract pathname."
    },
    {
        "type": "boolean",
        "name": "setLastModified",
        "args": ["long time"],
        "desc": "Sets the last-modified time of the file or directory named by this abstract pathname."
    },
    {
        "type": "boolean",
        "name": "setReadable",
        "args": ["boolean readable"],
        "desc": "A convenience name to set the owner's read permission for this abstract pathname."
    },
    {
        "type": "boolean",
        "name": "setReadable",
        "args": ["boolean readable", "boolean ownerOnly"],
        "desc": "Sets the owner's or everybody's read permission for this abstract pathname."
    },
    {
        "type": "boolean",
        "name": "setReadOnly",
        "args": [],
        "desc": "Marks the file or directory named by this abstract pathname so that only read operations are allowed."
    },
    {
        "type": "boolean",
        "name": "setWritable",
        "args": ["boolean writable"],
        "desc": "A convenience name to set the owner's write permission for this abstract pathname."
    },
    {
        "type": "boolean",
        "name": "setWritable",
        "args": ["boolean writable", "boolean ownerOnly"],
        "desc": "Sets the owner's or everybody's write permission for this abstract pathname."
    },
    {
        "type": "Path",
        "name": "toPath",
        "args": [],
        "desc": "Returns a java.nio.file.Path object constructed from the this abstract path."
    },
    {
        "type": "String",
        "name": "toString",
        "args": [],
        "desc": "Returns the pathname string of this abstract pathname."
    },
    {
        "type": "URI",
        "name": "toURI",
        "args": [],
        "desc": "Constructs a file: URI that represents this abstract pathname."
    },
    {
        "type": "URL",
        "name": "toURL",
        "args": [],
        "desc": "Deprecated. "
    },
    {
        "type": "This name does not automatically escape characters that are illegal in URLs. It is recommended that new code convert an abstract pathname into a URL by first converting it into a URI",
        "name": " via the toURI name",
        "args": " and then converting the URI into a URL via the URI.toURL name."
    }
]
